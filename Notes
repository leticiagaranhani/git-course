GIT -> sistema de controle de versão
GITHUB -> local da web para colocar projetos versionados em GIT. Só um repositório remoto.

O Git guarda suas informaçõesem 3 lugares:
	1. git config do sistema
	2. git config do usuário
	3. git do projeto específico

Configuração do Git: 
$ git config --global user.nome "Leticia Garanhani"

$ git config --global user.email "leticia.garanhani@gmail.com"

$ git config --list  //  lista com todas as propriedade

Para inicializar um repositório e ele ser considerado parte do ecossistema do git, utilizar o comando <git init>. Ele será responsável pelo repositório e ficar enxergando de todas as mudanças deste projeto. E será criado um diretório ".git"(oculto).

Dentro do diretório ".git" estão algumas pastas:
	HEAD 
	branches -> quais os branches existente e o branch padrão
	config	-> configuração do repositório
	description
	hooks	-> gatilhos paara determinadas ações
	info
	objects
	refs

Ciclo de Vida dos Status dos Arquivos:
1. Untracked - Não Marcado: momento em que o arquivo acabou de ser adicionado. O Git não reconhece nenhuma vesão da existência deste arquivo.
2. Unmodified - Não modificado: o arquivo passa a existir no git após ser adicionado <git add file>, mas não apresenta nenhuma modificação em cima dele.
3. Modified: quando arquivo foi editado.
4. Staged: momento que o arquivo é colocado na área que vai ser criada a versão, a área "Staged". Assim, que é gerado o commit, o arquivo staged volta a ser unmodified. 


COMANDOS

	git init: no diretório escolhido, é responsávil por inicializar o repositório e ficar enxergando todas as mudanças ocorridas. Este comando cria o diretório .git.

	git status: reporta a situação do repositório.

	git add: adiciona arquivos ao rastreamento para versionamento. Ao pesquisar com git status, mostra o arquivo adicionado como "New file". Após comando git add, arquivo fica na situação de staged (até ser commitado ou modificado).

	git commit -m "<mensagem>": é o momento que você avisa o git para pegar todos os arquivos do repositório que foram adicionados e criar uma imagem deles, uma versão.

	git log: para ver histórico de commits. Mostra o hash, autor, data e comentário utilizado.
		$ git log --author="<nome ou parte dele>", este comando lista logs por autor do commit
		$ git shortlog, este comando lista quantidade de por autor e apenas comentários/mensagens
		$ git shortlog -sn, este comando lista quantidade de commits por autor, e só.
		$ git log --graph, este comando mostra de forma gráfica o que está acontecendo com os branches e versões.

	git show <hash>: este comando identifica qual foi a alteração do commit, autor, data e comentário.
	
	git diff: este comando mostra as modificações do arquivo que já foi versionado antes, após uma modificação, antes de aplicar "git add", ou antes de ""git commit".
		$ git diff --name-only, no caso de uma lista imensa de arquivos modificados, é listado apenas os nomes dos arquivos, e não suas alterações.
	
	git checkout: retorna a versão do arquivo com status modificado para antes da alteração. Ao abrir o arquivo, vê-se que a alteração foi desfeita.
		$ git checkout <nome do arquivo>

	git reset --soft <penúltimo hash>: retira a alteração do último hash do log, deixando a alteração no arquivo staged, preparado para commitar novamente.

	git reset --mixed <penúntimo hash>: retira o último hash da lista de logs, mas deixa o arquivo com a alteração commitadano último hash, com o arquivo na situação de modified (antes do staged, tendo que dar git add novamente).

	git reset --hard <penúltimo hash>: mata a alteração do último commit, do último hash. Não há mais nada a fazer. Ele altera o histórico do último commit. Usar com muito cuidado. 

	git push origin <branch que está>: efetiva as alterações no repositório remoto.


.gitignore: 
arquivo criado para passar alguns padrões de arquivos, ou os nomes dos próprios arquivos que não queremos versionar/migrar para o repositório. Pode ser criado no próprio Vim. No diretório GitHub/gitignore do GitHub, é possível encontrar vários padrões de arquivos .gitignore para projetos de diferentes linguagens.

Criando Alias, para o Git, no terminal
Para não nos cansarmos de tanto digitar "git status", podemos criar um alias "git s" da seguinte forma: 
	$ git config --global alias.s status
	$ git s



